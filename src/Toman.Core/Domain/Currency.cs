using System;
using Toman.Extensions;

namespace Toman;

/// <summary>
/// Unit of Exchange for money.
/// </summary>
public class Currency
{

    /// <summary>
    /// The generic sign for unknown currency.
    /// </summary>
    /// <remarks>See : https://en.wikipedia.org/wiki/Currency_sign_(typography)</remarks>
    public const string UnknownCurrencySign = "Â¤";
    
    #region properties

    /// <summary>
    /// An AutoGenerated GUID for the currency.
    /// </summary>
    public Guid Id { get; private set; }
    
    /// <summary>
    /// Standard ISO-4217 code for the currency.
    /// </summary>
    public string Code { get; private set; }
    
    /// <summary>
    /// The numeric code for the currency.
    /// </summary>
    public string NumericCode { get; private set; }
    
    /// <summary>
    /// English name for the currency.
    /// </summary>
    public string EnglishName { get; private set; }
    
    /// <summary>
    /// The Currency symbol.
    /// </summary>
    public string Symbol { get; private set; }
    
    /// <summary>
    /// The number of decimal digits.
    /// </summary>
    public int DecimalCount { get; private set; }
    
    /// <summary>
    /// Persian name for the currency.
    /// </summary>
    public string? PersianName { get; private set; }
    
    /// <summary>
    /// Location names (country) which listed for this currency.
    /// </summary>
    public string[]? Locations { get; private set; }
    
    /// <summary>
    /// The wikipedia page url for the currency.
    /// </summary>
    public string? WikipediaUrl { get; private set; }
    
    /// <summary>
    /// Some currencies has more than one symbol!
    /// </summary>
    public string[]? AlternativeSymbols { get; private set; }

    #endregion
    
    
    private Currency(
        string code, string numberCode, string englishName, string symbol,
        int decimalCount, string? persianName, string[]? locations, 
        string? wikipediaUrl, string[]? alternativeSymbols)
    {
        code.ThrowIfArgumentIsNull(nameof(code));
        numberCode.ThrowIfArgumentIsNull(nameof(numberCode));
        englishName.ThrowIfArgumentIsNull(nameof(englishName));
        symbol.ThrowIfArgumentIsNull(nameof(symbol));

        if (decimalCount < 0 || decimalCount > 28)
            throw new ArgumentOutOfRangeException("decimalCount's value cannot be less than zero or greater than 28.");

        Id = Guid.NewGuid();
        PersianName = persianName;
        Locations = locations;
        WikipediaUrl = wikipediaUrl;
        AlternativeSymbols = alternativeSymbols;
    }


    /// <summary>
    /// Creates a new Currency.
    /// </summary>
    /// <param name="code">Currency Code</param>
    /// <param name="numberCode">Currency Numeric code</param>
    /// <param name="englishName">Currency English name</param>
    /// <param name="symbol">Currency Symbol</param>
    /// <param name="decimalCount">Decimal digits count for the currency</param>
    /// <param name="persianName">Persian name for the currency</param>
    /// <param name="locations">Locations which support this currency</param>
    /// <param name="wikipediaUrl">The url for Wikipedia page for this currency</param>
    /// <param name="alternativeSumbols"></param>
    /// <returns>A new currency with the specified attributes.</returns>
    public static Currency Create(
        string code, string numberCode, string englishName, string symbol, int decimalCount, 
        string? persianName = null, string[]? locations = null, string? wikipediaUrl = null,
        string[]? alternativeSumbols = null)
    {
        return new Currency(
            code, numberCode, englishName, symbol, decimalCount,
            persianName, locations, wikipediaUrl, alternativeSumbols);
    }
    
}